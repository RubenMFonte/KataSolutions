- Exercise 1 (Two Sum)

  Write a function that takes an array of numbers (integers for the tests) and a target number. It should find two different items in the array that, when added together, give the target value. The indices of these items should then be returned in a tuple like so: (index1, index2).

  For the purposes of this kata, some tests may have multiple answers; any valid solutions will be accepted.

  The input will always be valid (numbers will be an array of length 2 or greater, and all of the items will be numbers; target will always be the sum of two different items from that array).


- Exercise 2 (The Supermarket Queue)

  There is a queue for the self-checkout tills at the supermarket. Your task is write a function to calculate the total time required for all the customers to check out!

  input
  customers: an array of positive integers representing the queue. Each integer represents a customer, and its value is the amount of time they require to check out.
  n: a positive integer, the number of checkout tills.
  output
  The function should return an integer, the total time required.


- Exercise 3 (Digital Root)

  In this kata, you must create a digital root function.

  A digital root is the recursive sum of all the digits in a number. Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. This is only applicable to the natural numbers.
  
- Exercise 4 (Bouncing Ball)
  
  A child is playing with a ball on the nth floor of a tall building. The height of this floor, h, is known.

  He drops the ball out of the window. The ball bounces (for example), to two-thirds of its height (a bounce of 0.66).

  His mother looks out of a window 1.5 meters from the ground.

  How many times will the mother see the ball pass in front of her window (including when it's falling and bouncing?

  Three conditions must be met for a valid experiment:
  Float parameter "h" in meters must be greater than 0
  Float parameter "bounce" must be greater than 0 and less than 1
  Float parameter "window" must be less than h.
  If all three conditions above are fulfilled, return a positive integer, otherwise return -1.

  Note:
  The ball can only be seen if the height of the rebounding ball is strictly greater than the window parameter.
